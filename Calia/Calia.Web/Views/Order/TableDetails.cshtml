@model PaymentVm

<style>
    
    

    .container {
        max-width: 1200px;
        margin: auto;
        padding: 20px;
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        background-color: #f5f5f5;
        padding: 15px;
        border-bottom: 1px solid #ddd;
        font-size: 1.25em;
        font-weight: bold;
    }

    .card-body {
        padding: 15px;
    }

    .btn {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        margin-right: 10px;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-warning {
        background-color: #ffc107;
        color: white;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
    }

    .col {
        flex: 1;
        padding: 10px;
    }

    .list-group {
        padding: 0;
        list-style: none;
    }

    .list-group-item {
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 10px;
        position: relative;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

        .list-group-item input[type="checkbox"] {
            position: absolute;
            top: 15px;
            right: 15px;
        }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
        padding-top: 60px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 70%;
        max-width: 600px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .order-details {
        margin-top: 10px;
    }

        .order-details h5 {
            margin-bottom: 10px;
        }

        .order-details ul {
            padding-left: 20px;
            list-style-type: square;
        }

            .order-details ul li {
                margin-bottom: 5px;
            }

    .form-group {
        margin-bottom: 15px;
    }
</style>

<div class="container">
    <div class="card">
        <div class="card-header">
            Masa Detayları - @Model.TableDetails.TableId
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <h4>Ödenmiş Siparişler</h4>
                    @if (Model.PaidOrderDetails.Any())
                    {
                        <div class="list-group ">
                            @foreach (var order in Model.PaidOrderDetails)
                            {

                                <div class="list-group-item">
                                    <strong>@order.ProductName</strong> - @order.OdemesiAlinmisCount x @order.Price TL
                                    <div class="order-details">
                                        @if (order.ProductExtrasList != null && order.ProductExtrasList.Any())
                                        {
                                            <h5>Ekstralar:</h5>
                                            <ul>
                                                @foreach (var extra in order.ProductExtrasList)
                                                {
                                                    <li>@extra.ExtraName - @extra.Price TL</li>
                                                }
                                            </ul>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p>Ödenmiş sipariş bulunmamaktadır.</p>
                    }
                </div>
                @if (Model.IkramOrderDetails.Any())
                {
                    <div class="col">
                        <h4>Ikram Siparişler</h4>
                        
                        
                            <div class="list-group">
                                @foreach (var order in Model.IkramOrderDetails)
                                {

                                <div class="list-group-item">
                                        <strong>@order.ProductName</strong> - @order.OdemesiAlinmisCount x @order.Price TL
                                        <div class="order-details">
                                            @if (order.ProductExtrasList != null && order.ProductExtrasList.Any())
                                            {
                                                <h5>Ekstralar:</h5>
                                                <ul>
                                                    @foreach (var extra in order.ProductExtrasList)
                                                    {
                                                        <li>@extra.ExtraName - @extra.Price TL</li>
                                                    }
                                                </ul>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        
                        
                    </div>
                }
                
                <div class="col">
                    <h4>Ödenmemiş Siparişler</h4>
                    @if (Model.UnpaidOrderDetails.Any())
                    {
                        <div class="list-group">
                            @foreach (var order in Model.UnpaidOrderDetails)
                            {
                                <div class="list-group-item">
                                    <strong>@order.ProductName</strong> - @order.Count x @order.Price TL
                                    <input type="checkbox" class="form-check-input" name="SelectedOrderDetailIds" value="@order.OrderDetailsId" />
                                    @* <input class="form-check-input" type="checkbox"> *@
                                    <div class="order-details">
                                        @if (order.ProductExtrasList != null && order.ProductExtrasList.Any())
                                        {
                                            <h5>Ekstralar:</h5>
                                            <ul>
                                                @foreach (var extra in order.ProductExtrasList)
                                                {
                                                    <li>@extra.ExtraName - @extra.Price TL</li>
                                                }
                                            </ul>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                        //SESYOKK ARA BENİ MESGUL AMK NE ALAKA
                        // MESGUL CALIYON
                    }
                    else
                    {
                        <p>Ödenmemiş sipariş bulunmamaktadır.</p>
                    }
                </div>
            </div>

            <!-- Butonlar -->
            <div class="mt-4">
                <button class="btn btn-primary" id="openPaymentModal">Ödeme Yap</button>
                <button class="btn btn-success" id="openCloseTableModal">Masa Kapat</button>
                <button class="btn btn-warning" id="openChangeTableModal">Masa Değiştir</button>
                <button class="btn btn-danger" id="openCancelOrderModal">Sipariş İptal Et</button>
            </div>
        </div>
    </div>
</div>

<!-- Sipariş İptali Modalı -->
<div id="cancelOrderModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h4>Sipariş İptali</h4>
        <div id="selectedOrdersForCancelContainer">
            <!-- İptal edilecek siparişler burada gösterilecek -->
        </div>
        <form method="post" action="@Url.Action("CancelOrder", "Order")">
            <!-- Gizli alanlar -->
            <input type="hidden" name="SelectedOrderDetailsIds" id="SelectedOrderDetailsForCancelIds" />
            <input type="hidden" name="SelectedOrderDetailCounts" id="SelectedOrderDetailCountsForCancel" />
            <div class="form-group">
                <label for="CancelReason">İptal Nedeni:</label>
                <textarea id="CancelReason" name="CancelReason" class="form-control" rows="3"></textarea>
            </div>
            <input type="hidden" name="TableId" id="TableId" />
            <button type="submit" class="btn btn-danger">Siparişi İptal Et</button>
        </form>
    </div>
</div>



<!-- Masa Kapat Modalı -->
<div id="closeTableModal" class="modal" style="display: none; align-items: center; justify-content: center;">
    <div class="modal-content" style="text-align: center; padding: 20px; border-radius: 10px; background-color: #f9f9f9; width: 300px; box-shadow: 0 5px 15px rgba(0,0,0,0.3);">
        <span class="close" style="position: absolute; top: 10px; right: 15px; font-size: 20px; cursor: pointer;">&times;</span>
        <h4 style="margin-bottom: 30px;">Masayı kapatmak istediğinizden emin misiniz?</h4>

        <!-- Button container with flexbox for alignment -->
        <div style="display: flex; justify-content: space-between;">
            <button class="btn btn-success" id="confirmCloseTable" style="width: 120px; height: 50px; font-size: 18px; margin-right: 10px;">Evet</button>
            <button class="btn btn-danger close" style="width: 120px; height: 50px; font-size: 18px;">Hayır</button>
        </div>
    </div>
</div>



<!-- Masa Değiştir Modalı -->
<div id="changeTableModal" class="modal" style="display:none;">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h4>Masa Değiştir</h4>
        <form id="changeTableForm" action="@Url.Action("ChangeTable", "Order")">
            <input type="hidden" id="GecilmekIstenilenMasa" name="GecilmekIstenilenMasa" />
            <div class="form-group">
                <label for="tableSelect">Yeni Masa Seçin:</label>
                <select id="tableSelect" class="form-control">
                    @foreach (var table in Model.Tables)
                    {
                        <option value="@table.Value">@table.Text</option>
                    }
                </select>
            </div>
            <button type="button" id="confirmChangeTable" class="btn btn-primary">Değiştir</button>
            <button type="button" class="btn btn-danger close">İptal</button>
        </form>
    </div>
</div>



<!-- Ödeme Modalı -->
<div id="paymentModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h4>Ödeme Bilgileri</h4>
        <div id="selectedOrdersContainer">
            <!-- Seçilen siparişler burada gösterilecek -->
        </div>
        <div class="form-group">
            <strong>Toplam Tutar: </strong><span id="orderTotal">0.00</span> TL
        </div>
        <form method="post" >
            <div class="form-group">
                <label for="CashAmount">Nakit:</label>
                <input type="number" id="CashAmount" name="CashAmount" class="form-control" />
            </div>
            <div class="form-group">
                <label for="CreditCardAmount">Kredi Kartı:</label>
                <input type="number" id="CreditCardAmount" name="CreditCardAmount" class="form-control" />
            </div>
            <div class="form-group">
                <label for="IkramAmount">İskonto:</label>
                <input type="number" id="IkramAmount" name="IkramAmount" class="form-control" />
            </div>
            <!-- Gizli alanlar -->
            <input type="hidden" name="SelectedOrderDetailsIds" id="SelectedOrderDetailsIds" />

            <input type="hidden" name="TotalAmount" id="TotalAmount" />
            <input type="hidden" name="TableId" id="PaymentTableId" />
            <input type="hidden" name="SelectedOrderDetailCounts" id="SelectedOrderDetailCounts" />
            <button type="submit" asp-action="ProcessPaymentCredit" asp-controller="Order" id="creditCardButton" class="btn btn-warning">Kredi Kartı</button>
            <button type="submit" asp-action="ProcessPaymentCash" id="cashButton" class="btn btn-success">Nakit</button>
            <button type="submit" asp-action="ProcessPayment" asp-controller="Order" class="btn btn-primary">Ödemeyi Tamamla</button>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {

            function closeModal(modal) {
                modal.style.display = "none";
            }

            // Modal dışına tıklayınca kapatma
            window.onclick = function (event) {
                var modals = [cancelOrderModal, closeTableModal, paymentModal, changeTableModal];
                modals.forEach(function (modal) {
                    if (event.target == modal) {
                        closeModal(modal);
                    }
                });
            };

            // Sipariş İptali Modal İşlemleri
            var cancelOrderModal = document.getElementById("cancelOrderModal");
            var openCancelOrderBtn = document.getElementById("openCancelOrderModal");
            var closeCancelOrderSpan = cancelOrderModal.getElementsByClassName("close")[0];

            openCancelOrderBtn.onclick = function () {
                var selectedIds = [];
                var selectedOrdersHtml = '';
                var defaultCounts = []; // Store default counts in this array

                document.querySelectorAll("input[name='SelectedOrderDetailIds']:checked").forEach(function (checkbox) {
                    var orderItem = checkbox.closest('.list-group-item');
                    var productName = orderItem.querySelector('strong').textContent;
                    var price = parseFloat(orderItem.textContent.split(' - ')[1].split(' x ')[1].trim().replace('TL', ''));
                    var count = parseInt(orderItem.textContent.split(' - ')[1].split(' x ')[0].trim());
                    var totalPrice = price * count;

                    var extras = [];
                    orderItem.querySelectorAll('.order-details ul li').forEach(function (extraItem) {
                        var extraText = extraItem.textContent.split(' - ');
                        var extraName = extraText[0].trim();
                        var extraPrice = extraText[1].replace('TL', '').trim();
                        extras.push({ extraName: extraName, price: extraPrice });
                    });

                    selectedOrdersHtml +=
                        `<div>
                                <strong>${productName}</strong> -  <input type="number" name="orderCounts[${checkbox.value}]" value="${count}" min="1" max="${count}" class="form-control order-count" style="width: 70px; display: inline-block;" /> x ${price.toFixed(2)} TL (Toplam: ${totalPrice.toFixed(2)} TL)<br>
                                Ekstralar: ${extras.map(extra => `<span>${extra.extraName}(${extra.price} TL)</span>`).join(' ')}</div>`;

                    selectedIds.push(checkbox.value);
                    defaultCounts.push(count); // Store default count in array
                });

                document.getElementById("selectedOrdersForCancelContainer").innerHTML = selectedOrdersHtml;
                document.getElementById("SelectedOrderDetailsForCancelIds").value = selectedIds.map(Number).join(',');
                document.getElementById("TableId").value = '@Model.TableDetails.TableId';
                document.getElementById("SelectedOrderDetailCountsForCancel").value = defaultCounts.map(Number).join(',');

                document.querySelectorAll("#selectedOrdersForCancelContainer .order-count").forEach(function (input) {
                    input.addEventListener("input", function (event) {
                        var count = parseInt(event.target.value);
                        var index = Array.from(document.querySelectorAll("#selectedOrdersForCancelContainer .order-count")).indexOf(event.target);

                        // Değeri array'de güncelle
                        defaultCounts[index] = count;

                        // Güncellenmiş değeri inputa yaz
                        document.getElementById("SelectedOrderDetailCountsForCancel").value = defaultCounts.map(Number).join(',');
                    });
                });
                cancelOrderModal.style.display = "block";
            };

            closeCancelOrderSpan.onclick = function () {
                closeModal(cancelOrderModal);
            };

            // Sipariş sayısı güncelleme fonksiyonu
            function updateSelectedCounts() {
                var counts = [];
                document.querySelectorAll("#selectedOrdersForCancelContainer .order-count").forEach(function (input) {
                    counts.push(input.value);
                });
                document.getElementById("SelectedOrderDetailCountsForCancel").value = counts.map(Number).join(',');
            }

            // Masa Kapatma Modal İşlemleri
            var closeTableModal = document.getElementById("closeTableModal");
            var openCloseTableBtn = document.getElementById("openCloseTableModal");

            openCloseTableBtn.onclick = function () {
                closeTableModal.style.display = "block";
            };

            document.getElementById("confirmCloseTable").onclick = function () {
                var tableId = '@Model.TableDetails.tableNo.Id';

                fetch('@Url.Action("CloseTable", "Order")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ tableId: tableId })
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json();  // JSON yanıtı döndür
                        } else {
                            return response.text().then(text => { // Hata durumu için yanıt metni al
                                throw new Error(text);
                            });
                        }
                    })
                    .then(data => {
                        if (data.success) {
                            alert("Masa başarıyla Kapatildi.");
                            closeModal(changeTableModal);
                            window.location.href = '/Order/Masalar';
                        } else {
                            alert(data.message);
                        }
                    })
                    .catch(error => {
                        alert("Bir hata oluştu: " + error.message);  // Hata mesajını göster
                    });
            };

            //Odeme Modal Islemleri 
            var paymentModal = document.getElementById("paymentModal");
            var openPaymentBtn = document.getElementById("openPaymentModal");
            var closePaymentSpan = paymentModal.getElementsByClassName("close")[0];

            openPaymentBtn.onclick = function () {
                var selectedIds = [];
                var totalAmount = 0;
                var selectedOrdersHtml = "";
                var defaultCounts = []; // Store default counts in this array

                document.querySelectorAll("input[name='SelectedOrderDetailIds']:checked").forEach(function (checkbox) {
                    var orderItem = checkbox.closest('.list-group-item');
                    var productName = orderItem.querySelector('strong').textContent;
                    var price = parseFloat(orderItem.textContent.split(' - ')[1].split(' x ')[1].trim().replace('TL', ''));
                    var count = parseInt(orderItem.textContent.split(' - ')[1].split(' x ')[0].trim());
                    var totalPrice = price * count;

                    selectedOrdersHtml +=
                        `<div>
                    <strong>${productName}</strong> -
                    <input type="number" name="orderCounts[${checkbox.value}]" value="${count}" min="1" max="${count}" class="form-control order-count" style="width: 70px; display: inline-block;" /> x ${price.toFixed(2)} TL (Toplam: <span class="item-total">${totalPrice.toFixed(2)}</span> TL)<br>
                </div>`;

                    totalAmount += totalPrice;
                    selectedIds.push(checkbox.value);
                    defaultCounts.push(count); // Store default count in array
                });

                document.getElementById("SelectedOrderDetailsIds").value = selectedIds.map(Number).join(',');
                console.log("SelectedOrderDetailsIds:", document.getElementById("SelectedOrderDetailsIds").value);

                document.getElementById("selectedOrdersContainer").innerHTML = selectedOrdersHtml;
                document.getElementById("orderTotal").textContent = totalAmount.toFixed(2);

                document.getElementById("TotalAmount").value = totalAmount.toFixed(2);
                document.getElementById("PaymentTableId").value = '@Model.TableDetails.TableId';
                paymentModal.style.display = "block";

                // Update SelectedOrderDetailCounts with default counts if user doesn't change order counts
                document.getElementById("SelectedOrderDetailCounts").value = defaultCounts.map(Number).join(',');
            };

            // Order Counts inputlarının değişimini izleme
            document.getElementById("selectedOrdersContainer").addEventListener("input", function (event) {
                if (event.target.matches('.order-count')) {
                    var input = event.target;
                    var orderItem = input.closest('div'); // Ürün bilgilerini içeren div
                    var price = parseFloat(orderItem.textContent.split(' x ')[1].trim().replace('TL', '').split(' ')[0]);
                    var count = parseInt(input.value);
                    var newTotal = (price * count).toFixed(2);
                    orderItem.querySelector('.item-total').textContent = newTotal; // Toplam fiyatı güncelle

                    // Toplam tutarı güncelle
                    updateTotalAmount();
                    updateSelectedCounts();
                }
            });

            // Toplam tutarı güncelleme fonksiyonu
            function updateTotalAmount() {
                var totalAmount = 0;
                document.querySelectorAll("#selectedOrdersContainer .item-total").forEach(function (item) {
                    totalAmount += parseFloat(item.textContent);
                });
                document.getElementById("orderTotal").textContent = totalAmount.toFixed(2); // Toplam tutarı güncelle
                document.getElementById("TotalAmount").value = totalAmount.toFixed(2); // Hidden input değerini de güncelle
            }

            // Seçilen sipariş sayısını güncelleme fonksiyonu
            function updateSelectedCounts() {
                var counts = [];
                document.querySelectorAll("#selectedOrdersContainer .order-count").forEach(function (input) {

                    counts.push(input.value); // Değerleri counts dizisine ekle
                });

                document.getElementById("SelectedOrderDetailCounts").value = counts.map(Number).join(','); // Gizli alana aktar
            }


            // Masa Değiştirme Modal İşlemleri
            var changeTableModal = document.getElementById("changeTableModal");
            var openChangeTableBtn = document.getElementById("openChangeTableModal");
            var closeChangeTableSpan = changeTableModal.getElementsByClassName("close")[0];

            openChangeTableBtn.onclick = function () {
                changeTableModal.style.display = "block";
            };

            closeChangeTableSpan.onclick = function () {
                closeModal(changeTableModal);
            };

            document.getElementById("confirmChangeTable").onclick = function () {
                var selectedTableId = document.getElementById("tableSelect").value;
                var currentTableId = '@Model.TableDetails.TableId';

                document.getElementById("GecilmekIstenilenMasa").value = selectedTableId;

                fetch('@Url.Action("ChangeTable", "Order")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({
                        currentTableId: currentTableId,
                        newTableId: selectedTableId
                    })
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json();  // JSON yanıtı döndür
                        } else {
                            return response.text().then(text => { // Hata durumu için yanıt metni al
                                throw new Error(text);
                            });
                        }
                    })
                    .then(data => {
                        if (data.success) {
                            alert("Masa başarıyla değiştirildi.");
                            closeModal(changeTableModal);
                            window.location.href = '/Order/TableDetails/' + data.newTableId;
                        } else {
                            alert("Masa değiştirilemedi. Lütfen tekrar deneyin.");
                        }
                    })
                    .catch(error => {
                        alert("Bir hata oluştu: " + error.message);  // Hata mesajını göster
                    });
            };
        });
    </script>
}

